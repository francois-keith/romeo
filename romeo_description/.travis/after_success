#!/bin/bash
. .travis/common.sh

# Set debug mode
set -x
set -v

if [ -d debian ]; then
    if `test x${DIST} = x`; then
	echo "distribution is not set, skipping this build"
	exit 0
    fi
    echo "Target distribution: ${DIST}"

    export GNUPGHOME="$root_dir/.travis/.gnupg"
    # If the build is a success, upload the source package to Launchpad.
    if `test x${DIST} = xunstable`; then
	echo "Debian Sid package. Skipping Launchpad upload..."
    else
	if `! test ${TRAVIS_PULL_REQUEST} = false`; then
	    echo "skipping launchpad upload in pull request"
	else
	    dput ppa:${PPA_URI} "$build_dir"/export/*_source.changes
	fi
    fi
else
    if [ ! x${DIST} = x ]; then
	echo "skipping this build"
	exit 0
    fi

    cd $root_dir
    HEAD=`git rev-parse HEAD`

    # Upload coveralls data.
    if [ x${CC} = xgcc ]; then
	# If tests failed, coveralls data may not have been written
	coveralls -b "$build_dir" -e $install_dir &> coveralls.log || true
	cat coveralls.log || true
    else
	echo "skipping coveralls upload in non-gcc builds"
    fi

    # Coverity support
    if `! test x${COVERITY_TOKEN} = x`; then
	cd $build_dir
	PROJECT_NAME=`basename $root_dir`
	PROJECT_VERSION=`PKG_CONFIG_PATH="$build_dir" pkg-config --modversion ${PROJECT_NAME}`
	if `test x${PROJECT_NAME} = x`; then
	    echo "failed to determine project name"
	    exit 1
	fi
	if `test x${PROJECT_NAME} = x`; then
	    echo "failed to determine project version"
	    exit 1
	fi
	COVERITY_TARBALL=coverity-${PROJECT_NAME}-${PROJECT_VERSTION}.tgz
	tar czvf ${COVERITY_TARBALL} cov-int
	curl -s --form project=${PROJECT_NAME}			\
	     --form token=${COVERITY_TOKEN}			\
	     --form email=thomas.moulard@gmail.com		\
	     --form file=@$build_dir/${COVERITY_TARBALL}	\
	     --form version=${PROJECT_VERSION}			\
	     --form description="${PROJECT_NAME} v${PROJECT_VERSION} (Travis upload)" \
	     http://scan5.coverity.com/cgi-bin/upload.py
	cd $root_dir
    else
	echo "coverity support is disabled in this build"
    fi

    # If it's not a fork or a pull request
    if `test x${TRAVIS_REPO_SLUG} = x${GH_REPO} -a ${TRAVIS_PULL_REQUEST} = false`; then
	# Set the push capable URL.
	#
	# Add the possibility to use three variables instead of one to
	# work around string maximum length limitation issue.
	if `test x${GH_PUSH_URI} = x`; then
	    export GH_PUSH_URI=https://${GH_USERNAME}:${GH_TOKEN}@github.com/${GH_REPO}
	fi
	git remote set-url origin "${GH_PUSH_URI}"

	# Update the documentation.
	# Retrieve last commit of the gh-pages branch.
	git fetch --depth=1 origin gh-pages:gh-pages

	cd $build_dir/doc && $root_dir/cmake/github/update-doxygen-doc.sh \
	    -r $root_dir -b $build_dir

	# Push git note indicating success
	cd $root_dir
	notes_msg="Successful build.\n----\n\nDependencies commit id:"
	for package in ${GIT_DEPENDENCIES}; do
	    cd $build_dir/$package
	    commitid=`git rev-parse HEAD || echo unknown`
	    notes_msg="${notes_msg} $package : $commitid\n"
	done
	cd $root_dir
	git fetch --quiet --force origin refs/notes/travis:refs/notes/travis || true
	git notes --ref=travis add -f -m "$(echo "${notes_msg}")" $HEAD
	git push origin refs/notes/travis --force
    else
	echo "skipping doc/build result upload on forks and for pull requests"
    fi
fi

# End debug mode
set +v
set +x
