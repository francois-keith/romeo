#!/bin/bash
. .travis/common.sh

# Set debug mode
set -x
set -v

# build_package
# -------------
#
# Build the package using the last Eigen release (3.2.0) which is not
# available as a Debian package on Ubuntu 12.04.
build_package()
{
    echo "--> Building package..."

    # Coverity support
    MAKE_PREFIX=""
    if `! test x${COVERITY_TOKEN} = x`; then
	coverity_dir=`find $build_dir -type d -name 'cov-analysis*'`
	export PATH="$coverity_dir/bin:$PATH"
	MAKE_PREFIX="cov-build --dir cov-int"
    else
	echo "coverity support is disabled in this build"
    fi

    cd "$build_dir"
    cmake "$root_dir" -DCMAKE_INSTALL_PREFIX="$install_dir"	\
	-DCMAKE_CXX_FLAGS="--coverage"				\
	-DCMAKE_EXE_LINKER_FLAGS="--coverage"			\
	-DCMAKE_MODULE_LINKER_FLAGS="--coverage"		\
	${CMAKE_ADDITIONAL_OPTIONS}
    ${MAKE_PREFIX} make
    make install

    if `test x${ALLOW_TESTSUITE_FAILURE} = x`; then
	ALLOW_TESTSUITE_FAILURE=false
    fi
    make test || ${ALLOW_TESTSUITE_FAILURE}

    cppcheck --quiet --enable=all \
	-I $root_dir/src -I $root_dir/tests -I $root_dir/include \
	-I $root_dir/tests/shared-tests \
	-I $build_dir/include -I $install_dir/include \
	-i $build_dir/CMakeFiles \
	$root_dir || true

    if `! test x${NSIQCPPSTYLE_FILEFILTERPATH} = x`; then
	export PATH="$build_dir/nsiqcppstyle:$PATH"
	nsiqcppstyle --ci -f $root_dir/${NSIQCPPSTYLE_FILEFILTERPATH} $root_dir || true
    else
	echo "nsiqcppstyle support is disabled in this build"
    fi
}

# debian_build_package
# --------------------
#
# Use git-buildpackage and pbuilder to build the package in a sid
# sandbox.
debian_build_package()
{
    export GNUPGHOME="$root_dir/.travis/.gnupg"
    export NAME="Thomas Moulard (Travis Automatic Builds)"
    export DEBEMAIL="thomas.moulard+travis@gmail.com"

    echo "--> Building Debian package..."
    cd "$root_dir"

    buildNumber=$(git rev-list \
	$(git describe --tags --match "debian/*" --abbrev=0)..HEAD | wc -l) \
	|| buildNumber=1
    dch --force-distribution --distribution ${DIST} \
	--local ppa$buildNumber+$DIST "Travis automatic build"

    echo "debian/changelog first line:"
    head -n 1 debian/changelog

    git add debian/changelog
    git commit -m "Travis automatic commit"

    sudo chmod -R 777 /var/cache/pbuilder/ccache

    # If orig tarball exists, delete it.
    rm -f "$build_dir/export/*_*.orig.tar*"
    git-buildpackage					\
	--git-submodules				\
	--git-no-pristine-tar				\
	--git-ignore-branch				\
	--git-debian-branch=HEAD			\
	--git-export-dir="$build_dir/export"		\
	--git-tag					\
	--git-upstream-branch=master			\
	--git-dist=${DIST}				\
	--git-pbuilder					\
	--git-force-create				\
	--git-ignore-new				\
	--git-retag					\
	-p\"gpg\\ --passphrase\\ ${GNUPG_PASSPHRASE}\" \
	-k${DEBSIGN_KEYID} || exit 1


    git-buildpackage			\
	--git-submodules		\
	--git-no-pristine-tar		\
	--git-debian-branch=HEAD	\
	--git-ignore-branch		\
	--git-export-dir="$build_dir/export" \
	--git-tag			\
	--git-upstream-branch=master	\
	--git-dist=${DIST}		\
	--git-ignore-new		\
	--git-retag			\
	-p\"gpg --passphrase ${GNUPG_PASSPHRASE}\" \
	-k${DEBSIGN_KEYID} \
	-S -sa || exit 1
}


# Realize a normal build in all branches except the one containing a
# debian/ folder.
if [ -d debian ]; then
    if `test x${DIST} = x`; then
	echo "distribution is not set, skipping this build"
	exit 0
    fi
    echo "Target distribution: ${DIST}"
    debian_build_package
else
    if [ ! x${DIST} = x ]; then
	echo "skipping this build"
	exit 0
    fi
    # checking if it is a ros folder. Taking appropriate measure.
    # is it a catkin package?
    #if [ ! x${DIST} = x ]; then
    #  catkin_package
    #elif [ ! x${DIST} = x ]; then
    #  rosmake_package
    #else
      build_package
    #fi
fi

# End debug mode
set +v
set +x
